Порядок работы с API
=====================

Авторизация
------------

Большинству команд API требуется авторизация. Для этого команды требуют в качестве обязательного параметра так называемый авторизационный токен — массив байтов, однозначно идентифицирующий пользователя. Кроме того, во все методы интеграторского интерфейса требуется передавать так называемый **"ключ разработчика"** — уникальный строковый идентификатор интегратора. Интегратор не должен передавать свой "ключ разработчика" третьим лицам.

Для передачи авторизационной информации с каждым запросом используется стандатрный HTTP-заголовок Authorization. Схема аутентификации, используемая системой EDI.Контур, называется KonturEdiAuth. Для нее определены следующие параметры:

 - **konturediauth_api_client_id** служит для передачи ключа разработчика;
 - **konturediauth_token** служит для передачи авторизационного токена;
 - **konturediauth_login** служит для передачи логина (используется только в момент получения авторизационного токена);
 - **konturediauth_password** служит для передачи пароля (используется только в момент получения авторизационного токена).
 
Значения параметров отделяются от их имен символами '='. Параметры разделяются символами ','. Например:

.. code-block:: c#

	Authorization: KonturEdiAuth konturediauth_api_client_id=testClient-8ee1638deae84c86b8e2069955c2825a,	konturediauth_token=3IU0iPhuhHPZ6lrlumGz4pICEedhQ1XmlMN1Pk8z0DJ51MXkcTi6Q3CODCC4xTMsjPFfhK6XM4kCJ4JJ42hlD499/Ui5WSq6lrPwcdp4IIKswVUwyE0ZiwhlpeOwRjNrvUX1yPrxr0dY8a0w8ePsc1DG8HAlZce8a0hZiWylMqu23d/vfzRFuA==

Таким образом, общая последовательность действий, которые требуется совершить при обращении к функциям интеграторского интерфейса, следующая:

1. Получить авторизационный токен, отправив запрос на сервер и передав ключ разработчика, а также логин и пароль пользователя с помощью команды :doc:`Authenticate <../methods/Authenticate>`.
2. Во все остальные методы передавать кроме ключа разработчика авторизационный токен.

.. important::

	Нет необходимости авторизоваться перед каждым запросом. Авторизационный токен действителен до 12 часов, поэтому кэшируйте его.  При устаревании токена в ответ на запрос сервер возвращает HTTP-код 401 (Unauthorized). В этом случае повторите запрос :doc:`Authenticate <../methods/Authenticate>` и используйте новый токен.


Предварительные настройки
------------------------------------------------------

Перед началом работы с EDI-сообщениями проверьте и сохраните данные, которые потребуются в дальнейшем:

:doc:`GetAccessiblePartiesInfo <../methods/GetAccessiblePartiesInfo>`: 
	метод возвращает информацию о доступных пользователю организациях. Идентификатор организации **partyId** используется как входной параметр в следующем методе, а также в методах, предназначенных для получения информации об организации: :doc:`GetPartyInfo <../methods/GetPartyInfo>`, :doc:`GetUsersInfo <../methods/GetUsersInfo>`, :doc:`GetOrganizationCatalogueInfo <../methods/GetOrganizationCatalogueInfo>`.
:doc:`GetMainApiBox <../methods/GetMainApiBox>`: 
	метод возвращает **boxId** -- идентификатор ящика организации. Данный идентификатор вы будете использовать в качестве обязательного параметра при отправке сообщений (метод :doc:`SendMessage <../methods/SendMessage>`) и чтении событий в ящике (метод :doc:`GetEvents <../methods/GetEvents>`).
:doc:`GetBoxDocumentsSettings <../methods/GetBoxDocumentsSettings>`:
	метод возвращает информацию о доступных для получения и отправки типов сообщений по каждому из контрагентов организации.
 
Полученные данные меняются в исключительных случаях (например, при смене GLN или изменении цепочки сообщений с партнером), поэтому нет необходимости запрашивать их регулярно.

Cхема разового обращения к API
---------------------------------------------

#. **Авторизация:** получите авторизационный токен, сохраните его и используйте его в последующих запросах  в заголовке ``Authorization``.	  
#. **Отправка сообщений**: отправьте сообщения, используя метод :doc:`SendMessage <../methods/SendMessage>`.
#. **Получение новых событий**: обработка новых событий в ящике производится в несколько этапов.

	#. Получите новые события с помощью метода :doc:`GetEvents <../methods/GetEvents>`, в параметре **exclusiveEventId** укажите:
		* идентификатор последнего обработанного события из :doc:`BoxEventBatch<../structures/BoxEventBatch>` **lastEventId**, если вы уже запрашивали события ранее
		* идентификатор **EventPointer** последнего обработанного события, если нужно начать обработку очереди события с конкретного события из списка
		* пустое значение, если нужно получить список событий с самого начала работы
		
		Вам вернется список новых событий и идентификатор последнего обработанного события **lastEventId**.
	#. Обновите текущее состояние исходящих сообщений на основании данных в соответствующих событиях.
	#. Получите входящие сообщения методом :doc:`GetInboxMessage <../methods/GetInboxMessage>` для всех событий с типом *NewInboxMessage*.
	#. Повторите запрос GetEvents, указав в **exclusiveEventId** идентификатор последнего обработанного события **lastEventId**. Повторяйте процесс до тех пор, пока не прочитаете ленту до конца, т.е. пока список полученных событий не станет пустым.	  
	#. Сохраните **lastEventId** и используйте для получения событий в следующей сессии.	
	
.. important::

	При разработке интеграционного решения рекомендуем следовать следующему принципу: интеграционное решение должно игнорировать все события, которые оно не может распознать.	